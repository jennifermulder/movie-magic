[{"C:\\Users\\jennifer.mulder\\Desktop\\projects\\movie-magic\\client\\src\\index.js":"1","C:\\Users\\jennifer.mulder\\Desktop\\projects\\movie-magic\\client\\src\\App.js":"2","C:\\Users\\jennifer.mulder\\Desktop\\projects\\movie-magic\\client\\src\\pages\\SearchMovies.js":"3","C:\\Users\\jennifer.mulder\\Desktop\\projects\\movie-magic\\client\\src\\pages\\SavedMovies.js":"4","C:\\Users\\jennifer.mulder\\Desktop\\projects\\movie-magic\\client\\src\\components\\Navbar.js":"5","C:\\Users\\jennifer.mulder\\Desktop\\projects\\movie-magic\\client\\src\\components\\SignupForm.js":"6","C:\\Users\\jennifer.mulder\\Desktop\\projects\\movie-magic\\client\\src\\components\\LoginForm.js":"7","C:\\Users\\jennifer.mulder\\Desktop\\projects\\movie-magic\\client\\src\\utils\\API.js":"8","C:\\Users\\jennifer.mulder\\Desktop\\projects\\movie-magic\\client\\src\\utils\\auth.js":"9","C:\\Users\\jennifer.mulder\\Desktop\\projects\\movie-magic\\client\\src\\utils\\mutations.js":"10","C:\\Users\\jennifer.mulder\\Desktop\\projects\\movie-magic\\client\\src\\utils\\localStorage.js":"11","C:\\Users\\jennifer.mulder\\Desktop\\projects\\movie-magic\\client\\src\\utils\\queries.js":"12"},{"size":266,"mtime":1602282738635,"results":"13","hashOfConfig":"14"},{"size":1141,"mtime":1610656849610,"results":"15","hashOfConfig":"14"},{"size":4813,"mtime":1610927021637,"results":"16","hashOfConfig":"14"},{"size":2326,"mtime":1610920679292,"results":"17","hashOfConfig":"14"},{"size":2529,"mtime":1610841926344,"results":"18","hashOfConfig":"14"},{"size":3309,"mtime":1602545035507,"results":"19","hashOfConfig":"14"},{"size":2587,"mtime":1602562693425,"results":"20","hashOfConfig":"14"},{"size":1333,"mtime":1610918863913,"results":"21","hashOfConfig":"14"},{"size":1234,"mtime":1602547015207,"results":"22","hashOfConfig":"14"},{"size":1321,"mtime":1610840672979,"results":"23","hashOfConfig":"14"},{"size":839,"mtime":1610921259351,"results":"24","hashOfConfig":"14"},{"size":313,"mtime":1610840682389,"results":"25","hashOfConfig":"14"},{"filePath":"26","messages":"27","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},"9a3l2w",{"filePath":"29","messages":"30","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"31","messages":"32","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"33","usedDeprecatedRules":"28"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"36","usedDeprecatedRules":"28"},{"filePath":"37","messages":"38","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"41","usedDeprecatedRules":"28"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"44","usedDeprecatedRules":"28"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"47"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},"C:\\Users\\jennifer.mulder\\Desktop\\projects\\movie-magic\\client\\src\\index.js",[],["56","57"],"C:\\Users\\jennifer.mulder\\Desktop\\projects\\movie-magic\\client\\src\\App.js",[],"C:\\Users\\jennifer.mulder\\Desktop\\projects\\movie-magic\\client\\src\\pages\\SearchMovies.js",["58","59"],"import React, { useState, useEffect } from 'react';\nimport { useMutation } from '@apollo/react-hooks';\nimport { Jumbotron, Container, Col, Form, Button, Card, CardColumns } from 'react-bootstrap';\n\nimport Auth from '../utils/auth';\nimport { searchOmdbMovies } from '../utils/API';\nimport { saveMovieIds, getSavedMovieIds } from '../utils/localStorage';\nimport { SAVE_MOVIE } from '../utils/mutations';\n\nconst SearchMovies = () => {\n  // create state for holding returned OMDB api data\n  const [searchedMovies, setSearchedMovies] = useState([]);\n  // create state for holding our search field data\n  const [searchInput, setSearchInput] = useState('');\n\n  // create state to hold saved movieId values\n  const [savedMovieIds, setSavedMovieIds] = useState(getSavedMovieIds());\n\n  const [saveMovie, { error }] = useMutation(SAVE_MOVIE);\n\n  useEffect(() => {\n    return () => saveMovieIds(savedMovieIds);\n  });\n\n  // create method to search for movies and set state on form submit\n  const handleFormSubmit = async (event) => {\n    event.preventDefault();\n\n    if (!searchInput) {\n      return false;\n    }\n\n    try {\n      const response = await searchOmdbMovies(searchInput);\n\n      if (!response.ok) {\n        throw new Error('something went wrong!');\n      }\n      \n      // const items = await response.json();\n      const items = await response.json();\n      console.log(items);\n\n      //create a new array in order to map values\n      const newArr = Object.values(items);\n      // const movieArr = newArr[0];\n      console.log(newArr);   \n \n      const movieData = [{  \n        movieId: newArr[0],\n        title: newArr[0],\n        year: newArr[1],\n        description: newArr[9],\n        image: newArr[13] || '',\n      }];\n\n      console.log(movieData);\n\n\n      setSearchedMovies(movieData);\n      setSearchInput('');\n    } catch (err) {\n      console.error(err);\n    }\n  };\n\n  // create function to handle saving a movie to our database\n  const handleSaveMovie = async (movieId) => {\n    // find the movie in `searchedmovies` state by the matching id\n    const movieToSave = searchedMovies.find((movie) => movie.movieId === movieId);\n\n    // get token\n    const token = Auth.loggedIn() ? Auth.getToken() : null;\n\n    if (!token) {\n      return false;\n    }\n\n    try {\n      const response = await saveMovie({ variables: { movieData: { ...movieToSave } } });\n      // if movie successfully saves to user's account, save movie id to state\n      setSavedMovieIds([...savedMovieIds, movieToSave.movieId]);\n    } catch (err) {\n      console.error(err);\n    }\n  };\n\n  return (\n    <>\n      <Jumbotron fluid className='text-light bg-dark'>\n        <Container>\n          <h1>Search for Movies!</h1>\n          <Form onSubmit={handleFormSubmit}>\n            <Form.Row>\n              <Col xs={12} md={8}>\n                <Form.Control\n                  name='searchInput'\n                  value={searchInput}\n                  onChange={(e) => setSearchInput(e.target.value)}\n                  type='text'\n                  size='lg'\n                  placeholder='ie: Titanic'\n                />\n              </Col>\n              <Col xs={12} md={4}>\n                <Button type='submit' variant='primary' size='lg'>\n                  Submit Search\n                </Button>\n              </Col>\n            </Form.Row>\n          </Form>\n        </Container>\n      </Jumbotron>\n\n      <Container>\n        <h2>\n          {searchedMovies.length\n            ? `Viewing ${searchedMovies.length} result:`\n            : 'Search for a movie in the search bar above to see results'}\n        </h2>\n        <CardColumns>\n        {searchedMovies.map((movie) => {\n            return (\n              <Card key={movie.movieId} border='dark'>\n                {movie.image ? (\n                  <Card.Img src={movie.image} alt={`The cover for ${movie.title}`} variant='top' />\n                ) : null}\n                <Card.Body>\n                  <Card.Title>{movie.title}</Card.Title>\n                  <p className='small'>Year: {movie.year}</p>\n                  <Card.Text>{movie.description}</Card.Text>\n                  {Auth.loggedIn() && (\n                    <Button\n                      disabled={savedMovieIds?.some((savedMovieId) => savedMovieId === movie.movieId)}\n                      className='btn-block btn-info'\n                      onClick={() => handleSaveMovie(movie.movieId)}>\n                      {savedMovieIds?.some((savedMovieId) => savedMovieId === movie.movieId)\n                        ? 'This movie has already been nominated!'\n                        : 'Nominate this movie!'}\n                    </Button>\n                  )}\n                </Card.Body>\n              </Card>\n            );\n          })}\n        </CardColumns>\n      </Container>\n    </>\n  );\n};\n\nexport default SearchMovies;\n","C:\\Users\\jennifer.mulder\\Desktop\\projects\\movie-magic\\client\\src\\pages\\SavedMovies.js",["60","61","62"],"import React from 'react';\nimport { useQuery, useMutation } from '@apollo/react-hooks';\nimport { Jumbotron, Container, CardColumns, Card, Button } from 'react-bootstrap';\nimport { REMOVE_MOVIE } from '../utils/mutations';\nimport { GET_ME } from '../utils/queries';\n\nimport Auth from '../utils/auth';\nimport { removeMovieId } from '../utils/localStorage';\n\nconst SavedMovies = () => {\n\n  const { loading, data } = useQuery(GET_ME);\n\n  const [removeMovie, { error }] = useMutation(REMOVE_MOVIE);\n\n  const userData = data?.me || {}\n\n\n  // create function that accepts the movie's mongo _id value as param and deletes the movie from the database\n  const handleDeleteMovie = async (movieId) => {\n    const token = Auth.loggedIn() ? Auth.getToken() : null;\n\n    if (!token) {\n      return false;\n    }\n\n    try {\n      //movieId passed in handledeletemovie\n      const response = await removeMovie({variables:{movieId}});\n\n      removeMovieId(movieId);\n    } catch (err) {\n      console.error(err);\n    }\n  };\n\n  return (\n    <>\n      <Jumbotron fluid className='text-light bg-dark'>\n        <Container>\n          <h1>Viewing nomination list!</h1>\n        </Container>\n      </Jumbotron>\n      <Container>\n        <h2>\n          {userData.savedMovies?.length\n            ? `Viewing ${userData.savedMovies.length} saved ${userData.savedMovies.length === 1 ? 'movie' : 'movies'}:`\n            : 'You have not nominated any movies! Return to \"Search for Movies\" in order to make a nomination.'}\n        </h2>\n        <CardColumns>\n          {userData.savedMovies?.map((movie) => {\n            return (\n              <Card key={movie.movieId} border='dark'>\n                {movie.image ? <Card.Img src={movie.image} alt={`The cover for ${movie.title}`} variant='top' /> : null}\n                <Card.Body>\n                  <Card.Title>{movie.title}</Card.Title>\n                  <p className='small'>Year: {movie.year}</p>\n                  <Card.Text>{movie.description}</Card.Text>\n                  <Button className='btn-block btn-warning' onClick={() => handleDeleteMovie(movie.movieId)}>\n                    Remove this nomination!\n                  </Button>\n                </Card.Body>\n              </Card>\n            );\n          })}\n        </CardColumns>\n      </Container>\n    </>\n  );\n};\n\nexport default SavedMovies;\n","C:\\Users\\jennifer.mulder\\Desktop\\projects\\movie-magic\\client\\src\\components\\Navbar.js",[],"C:\\Users\\jennifer.mulder\\Desktop\\projects\\movie-magic\\client\\src\\components\\SignupForm.js",["63"],"import React, { useState } from 'react';\nimport { Form, Button, Alert } from 'react-bootstrap';\n\n// import { createUser } from '../utils/API';\nimport { ADD_USER } from '../utils/mutations';\nimport { useMutation} from '@apollo/react-hooks';\nimport Auth from '../utils/auth';\n\nconst SignupForm = () => {\n  // set initial form state\n  const [userFormData, setUserFormData] = useState({ username: '', email: '', password: '' });\n  // set state for form validation\n  const [validated] = useState(false);\n  // set state for alert\n  const [showAlert, setShowAlert] = useState(false);\n\n  const [addUser, {error}] = useMutation(ADD_USER);\n\n  const handleInputChange = (event) => {\n    const { name, value } = event.target;\n    setUserFormData({ ...userFormData, [name]: value });\n  };\n\n  const handleFormSubmit = async (event) => {\n    event.preventDefault();\n\n    // check if form has everything (as per react-bootstrap docs)\n    const form = event.currentTarget;\n    if (form.checkValidity() === false) {\n      event.preventDefault();\n      event.stopPropagation();\n    }\n\n    try {\n      const response = await addUser({\n        variables: {...userFormData}\n      });\n      Auth.login(response.data.addUser.token)\n    } catch (err) {\n      console.error(err);\n      setShowAlert(true);\n    }\n\n    setUserFormData({\n      username: '',\n      email: '',\n      password: '',\n    });\n  };\n\n  return (\n    <>\n      {/* This is needed for the validation functionality above */}\n      <Form noValidate validated={validated} onSubmit={handleFormSubmit}>\n        {/* show alert if server response is bad */}\n        <Alert dismissible onClose={() => setShowAlert(false)} show={showAlert} variant='danger'>\n          Something went wrong with your signup!\n        </Alert>\n\n        <Form.Group>\n          <Form.Label htmlFor='username'>Username</Form.Label>\n          <Form.Control\n            type='text'\n            placeholder='Your username'\n            name='username'\n            onChange={handleInputChange}\n            value={userFormData.username}\n            required\n          />\n          <Form.Control.Feedback type='invalid'>Username is required!</Form.Control.Feedback>\n        </Form.Group>\n\n        <Form.Group>\n          <Form.Label htmlFor='email'>Email</Form.Label>\n          <Form.Control\n            type='email'\n            placeholder='Your email address'\n            name='email'\n            onChange={handleInputChange}\n            value={userFormData.email}\n            required\n          />\n          <Form.Control.Feedback type='invalid'>Email is required!</Form.Control.Feedback>\n        </Form.Group>\n\n        <Form.Group>\n          <Form.Label htmlFor='password'>Password</Form.Label>\n          <Form.Control\n            type='password'\n            placeholder='Your password'\n            name='password'\n            onChange={handleInputChange}\n            value={userFormData.password}\n            required\n          />\n          <Form.Control.Feedback type='invalid'>Password is required!</Form.Control.Feedback>\n        </Form.Group>\n        <Button\n          disabled={!(userFormData.username && userFormData.email && userFormData.password)}\n          type='submit'\n          variant='success'>\n          Submit\n        </Button>\n      </Form>\n    </>\n  );\n};\n\nexport default SignupForm;\n","C:\\Users\\jennifer.mulder\\Desktop\\projects\\movie-magic\\client\\src\\components\\LoginForm.js",["64"],"// see SignupForm.js for comments\nimport React, { useState } from 'react';\nimport { Form, Button, Alert } from 'react-bootstrap';\nimport { LOGIN_USER } from '../utils/mutations';\nimport { useMutation} from '@apollo/react-hooks';\nimport Auth from '../utils/auth';\n\nconst LoginForm = () => {\n  const [userFormData, setUserFormData] = useState({ email: '', password: '' });\n  const [validated] = useState(false);\n  const [showAlert, setShowAlert] = useState(false);\n  const [login, { error }] = useMutation(LOGIN_USER);\n\n  const handleInputChange = (event) => {\n    const { name, value } = event.target;\n    setUserFormData({ ...userFormData, [name]: value });\n  };\n\n  const handleFormSubmit = async (event) => {\n    event.preventDefault();\n\n    // check if form has everything (as per react-bootstrap docs)\n    const form = event.currentTarget;\n    if (form.checkValidity() === false) {\n      event.preventDefault();\n      event.stopPropagation();\n    }\n\n    try {\n      const { data } = await login({\n        variables: { ...userFormData }\n      });\n\n      Auth.login(data.login.token);\n    } catch (err) {\n      console.error(err);\n      setShowAlert(true);\n    }\n\n    setUserFormData({\n      email: '',\n      password: '',\n    });\n  };\n\n  return (\n    <>\n      <Form noValidate validated={validated} onSubmit={handleFormSubmit}>\n        <Alert dismissible onClose={() => setShowAlert(false)} show={showAlert} variant='danger'>\n          Something went wrong with your login credentials!\n        </Alert>\n        <Form.Group>\n          <Form.Label htmlFor='email'>Email</Form.Label>\n          <Form.Control\n            type='text'\n            placeholder='Your email'\n            name='email'\n            onChange={handleInputChange}\n            value={userFormData.email}\n            required\n          />\n          <Form.Control.Feedback type='invalid'>Email is required!</Form.Control.Feedback>\n        </Form.Group>\n\n        <Form.Group>\n          <Form.Label htmlFor='password'>Password</Form.Label>\n          <Form.Control\n            type='password'\n            placeholder='Your password'\n            name='password'\n            onChange={handleInputChange}\n            value={userFormData.password}\n            required\n          />\n          <Form.Control.Feedback type='invalid'>Password is required!</Form.Control.Feedback>\n        </Form.Group>\n        <Button\n          disabled={!(userFormData.email && userFormData.password)}\n          type='submit'\n          variant='success'>\n          Submit\n        </Button>\n      </Form>\n    </>\n  );\n};\n\nexport default LoginForm;\n","C:\\Users\\jennifer.mulder\\Desktop\\projects\\movie-magic\\client\\src\\utils\\API.js",[],["65","66"],"C:\\Users\\jennifer.mulder\\Desktop\\projects\\movie-magic\\client\\src\\utils\\auth.js",[],"C:\\Users\\jennifer.mulder\\Desktop\\projects\\movie-magic\\client\\src\\utils\\mutations.js",[],"C:\\Users\\jennifer.mulder\\Desktop\\projects\\movie-magic\\client\\src\\utils\\localStorage.js",[],"C:\\Users\\jennifer.mulder\\Desktop\\projects\\movie-magic\\client\\src\\utils\\queries.js",[],{"ruleId":"67","replacedBy":"68"},{"ruleId":"69","replacedBy":"70"},{"ruleId":"71","severity":1,"message":"72","line":19,"column":23,"nodeType":"73","messageId":"74","endLine":19,"endColumn":28},{"ruleId":"71","severity":1,"message":"75","line":80,"column":13,"nodeType":"73","messageId":"74","endLine":80,"endColumn":21},{"ruleId":"71","severity":1,"message":"76","line":12,"column":11,"nodeType":"73","messageId":"74","endLine":12,"endColumn":18},{"ruleId":"71","severity":1,"message":"72","line":14,"column":25,"nodeType":"73","messageId":"74","endLine":14,"endColumn":30},{"ruleId":"71","severity":1,"message":"75","line":29,"column":13,"nodeType":"73","messageId":"74","endLine":29,"endColumn":21},{"ruleId":"71","severity":1,"message":"72","line":17,"column":20,"nodeType":"73","messageId":"74","endLine":17,"endColumn":25},{"ruleId":"71","severity":1,"message":"72","line":12,"column":19,"nodeType":"73","messageId":"74","endLine":12,"endColumn":24},{"ruleId":"67","replacedBy":"77"},{"ruleId":"69","replacedBy":"78"},"no-native-reassign",["79"],"no-negated-in-lhs",["80"],"no-unused-vars","'error' is assigned a value but never used.","Identifier","unusedVar","'response' is assigned a value but never used.","'loading' is assigned a value but never used.",["79"],["80"],"no-global-assign","no-unsafe-negation"]